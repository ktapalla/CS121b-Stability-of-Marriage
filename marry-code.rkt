#lang racket

; You should be replacing every ... with your own code to implement
;  that functionality.
(define ... '())

(define (match-make proposers proposees)
  (send proposers 'reset)
  (send proposees 'reset)
  (courtship proposers proposers proposees)
  (zip-together (send proposers 'name)
                (send (send proposers 'intended) 'name)))

(define (courtship unengaged-proposers proposers proposees)
  (if (null? unengaged-proposers) (write 'everyone-is-engaged)
        (send unengaged-proposers 'propose)
   )
  (let ((new-unengaged (currently-unengaged proposers)))
    (if (null? new-unengaged) (write 'courting-completed)
        (courtship new-unengaged proposers proposees)
    )
   ) 
 )

(define (send list-of-people message)
  (if (null? list-of-people) '()
     (let ((x (car list-of-people))) 
       (x message) (send (cdr list-of-people) message)
     )
   ) 
 )

(define (currently-unengaged list-of-people)
  (if (null? list-of-people) '()
     (let ((x (car list-of-people)))
         (if (null? (x 'intended)) 
             (cons x (currently-unengaged (cdr list-of-people)))
             (currently-unengaged (cdr list-of-people))
          )
     )
   )
)

(define (couple? person1 person2)
   (and (eq? (person1 'intended) person2) 
        (eq? (person2 'intended) person1) 
   )
)


(define (make-person my-name)
  (let ((name my-name)
        (preference-list '())
        (possible-mates '())
        (current-intended '()))
    (define (i-like-more? person1 person2)
      (equal? (list person1 person2)
           (filter (lambda (person)
                      (or (eq? person person1) (eq? person person2)))
                   preference-list)))
    (define (me message)
      (cond ((eq? message 'name) name)
            ((eq? message 'intended) current-intended)
            ((eq? message 'loves) preference-list)
            ((eq? message 'possible) possible-mates)
            ((eq? message 'reset)
               (set! current-intended '())
               (set! possible-mates preference-list)
               'reset-done)
            ((eq? message 'load-preferences)
               (lambda (plist)
                  (set! preference-list plist)
                  (set! possible-mates plist)
                  (set! current-intended '())
                  'preferences-loaded))
            ((eq? message 'propose)
               (let ((beloved (car possible-mates)))
                 (write name)  
                 (write '-proposed-to-)
                 (write (beloved 'name))
                 (newline)
                 (set! possible-mates (cdr possible-mates))
                 (if (eq? ((beloved 'i-love-you) me)
                          'i-love-you-too
                           )
                     (begin (set! current-intended beloved)
                            'we-are-engaged
                            (write name)  
                            (write '-and-)
                            (write (beloved 'name))
                            (write '-are-engaged)
                            (newline)
                            )
                     (begin 'no-one-loves-me
                            (write (beloved 'name))
                            (write '-rejected-)
                            (write name)  
                            (newline)
                            ))))
            ((eq? message 'i-love-you)
              (lambda (sender)
                (cond ((null? current-intended)
                       (begin (set! current-intended sender)
                               'i-love-you-too))
                      ((not (null? current-intended))
                       (if (i-like-more? sender current-intended)
                             (begin ((current-intended 'i-changed-my-mind) me)
                             (set! current-intended sender) 'i-love-you-too)
                             'buzz-off-creep
                           )
                       )
                 )
              )
            )
            ((eq? message 'i-changed-my-mind)
               (lambda (lost-love)
                  (cond ((eq? current-intended lost-love)
                            (set! current-intended '())
                            'dumped!
                            (write (lost-love 'name))
                            (write '-dumped-)
                            (write name)  
                            (newline)
                            )
                        (else (error 
                                 "Dumper must be engaged to dumpee! "
                                 name me lost-love)))))
            (else 
              (error "Bad message to a person " me name message))))

      me))


 (define (zip-together list1 list2)
   (if (null? list1)
       '()
       (cons (list (car list1) (car list2))
	     (zip-together (cdr list1) (cdr list2)))))

 (define (filter pred lst)
   (cond ((null? lst) '())
	 ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))
	 (else (filter pred (cdr lst)))))

;; This is a companion file for -- Stable Marriage
;; Here are some people for you to experiment with:

(define alan (make-person 'Alan))
(define bob (make-person 'Bob))
(define charles (make-person 'Chuck))
(define david (make-person 'Dave))
(define ernest (make-person 'Ernie))
(define franklin (make-person 'Frank))

(define agnes (make-person 'Agnes))
(define bertha (make-person 'Bertha))
(define carol (make-person 'Carol))
(define deborah (make-person 'Debbie))
(define ellen (make-person 'Ellen))
(define francine (make-person 'Fran))

((alan 'load-preferences) 
   (list agnes carol francine bertha deborah ellen))
((bob 'load-preferences) 
   (list carol francine bertha deborah agnes ellen))
((charles 'load-preferences) 
   (list agnes francine carol deborah bertha ellen))
((david 'load-preferences) 
   (list francine ellen deborah agnes carol bertha))
((ernest 'load-preferences) 
   (list ellen carol francine agnes deborah bertha))
((franklin 'load-preferences) 
   (list ellen carol francine bertha agnes deborah))

((agnes 'load-preferences) 
   (list charles alan bob david ernest franklin))
((bertha 'load-preferences) 
   (list charles alan bob david ernest franklin))
((carol 'load-preferences) 
   (list franklin charles bob alan ernest david))
((deborah 'load-preferences) 
   (list bob alan charles franklin david ernest))
((ellen 'load-preferences) 
   (list franklin charles bob alan ernest david))
((francine 'load-preferences) 
   (list alan bob charles david franklin ernest))

(define men (list alan bob charles david ernest franklin))

(define women (list agnes bertha carol deborah ellen francine))

